// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: templates.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO templates (
  name,
  width,
  height,
  company_id,
  request_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
`

type CreateTemplateParams struct {
	Name      string      `json:"name"`
	Width     pgtype.Int4 `json:"width"`
	Height    pgtype.Int4 `json:"height"`
	CompanyID pgtype.Int4 `json:"company_id"`
	RequestID pgtype.Text `json:"request_id"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.Name,
		arg.Width,
		arg.Height,
		arg.CompanyID,
		arg.RequestID,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RequestID,
		&i.ProjectID,
		&i.Type,
		&i.Width,
		&i.Height,
		&i.SlotsX,
		&i.SlotsY,
		&i.MaxSlotsX,
		&i.MaxSlotsY,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID,
	)
	return i, err
}

const createTemplateByProject = `-- name: CreateTemplateByProject :one
INSERT INTO templates (
  name,
  width,
  height,
  request_id,
  company_id,
  project_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
`

type CreateTemplateByProjectParams struct {
	Name      string      `json:"name"`
	Width     pgtype.Int4 `json:"width"`
	Height    pgtype.Int4 `json:"height"`
	RequestID pgtype.Text `json:"request_id"`
	CompanyID pgtype.Int4 `json:"company_id"`
	ProjectID pgtype.Int4 `json:"project_id"`
}

func (q *Queries) CreateTemplateByProject(ctx context.Context, arg CreateTemplateByProjectParams) (Template, error) {
	row := q.db.QueryRow(ctx, createTemplateByProject,
		arg.Name,
		arg.Width,
		arg.Height,
		arg.RequestID,
		arg.CompanyID,
		arg.ProjectID,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RequestID,
		&i.ProjectID,
		&i.Type,
		&i.Width,
		&i.Height,
		&i.SlotsX,
		&i.SlotsY,
		&i.MaxSlotsX,
		&i.MaxSlotsY,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID,
	)
	return i, err
}

const createTemplateDistortions = `-- name: CreateTemplateDistortions :one
INSERT INTO templates_distortions (
  x,
  y,
  template_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, x, y, created_at, updated_at, deleted_at, template_id
`

type CreateTemplateDistortionsParams struct {
	X          pgtype.Int4 `json:"x"`
	Y          pgtype.Int4 `json:"y"`
	TemplateID int32       `json:"template_id"`
}

func (q *Queries) CreateTemplateDistortions(ctx context.Context, arg CreateTemplateDistortionsParams) (TemplatesDistortion, error) {
	row := q.db.QueryRow(ctx, createTemplateDistortions, arg.X, arg.Y, arg.TemplateID)
	var i TemplatesDistortion
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TemplateID,
	)
	return i, err
}

const createTemplateSlot = `-- name: CreateTemplateSlot :one
INSERT INTO templates_slots (
  xi,
  yi,
  width,
  height,
  template_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, xi, yi, width, height, created_at, updated_at, deleted_at, template_id
`

type CreateTemplateSlotParams struct {
	Xi         pgtype.Int4 `json:"xi"`
	Yi         pgtype.Int4 `json:"yi"`
	Width      pgtype.Int4 `json:"width"`
	Height     pgtype.Int4 `json:"height"`
	TemplateID int32       `json:"template_id"`
}

func (q *Queries) CreateTemplateSlot(ctx context.Context, arg CreateTemplateSlotParams) (TemplatesSlot, error) {
	row := q.db.QueryRow(ctx, createTemplateSlot,
		arg.Xi,
		arg.Yi,
		arg.Width,
		arg.Height,
		arg.TemplateID,
	)
	var i TemplatesSlot
	err := row.Scan(
		&i.ID,
		&i.Xi,
		&i.Yi,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TemplateID,
	)
	return i, err
}

const deleteTemplateByID = `-- name: DeleteTemplateByID :exec
DELETE FROM templates WHERE id = $1
`

func (q *Queries) DeleteTemplateByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTemplateByID, id)
	return err
}

const getTemplate = `-- name: GetTemplate :one
SELECT templates.id, templates.name, templates.request_id, templates.project_id, templates.type, templates.width, templates.height, templates.slots_x, templates.slots_y, templates.max_slots_x, templates.max_slots_y, templates.created_at, templates.updated_at, templates.deleted_at, templates.company_id
FROM templates
WHERE templates.id = $1 LIMIT 1
`

type GetTemplateRow struct {
	Template Template `json:"template"`
}

func (q *Queries) GetTemplate(ctx context.Context, id int32) (GetTemplateRow, error) {
	row := q.db.QueryRow(ctx, getTemplate, id)
	var i GetTemplateRow
	err := row.Scan(
		&i.Template.ID,
		&i.Template.Name,
		&i.Template.RequestID,
		&i.Template.ProjectID,
		&i.Template.Type,
		&i.Template.Width,
		&i.Template.Height,
		&i.Template.SlotsX,
		&i.Template.SlotsY,
		&i.Template.MaxSlotsX,
		&i.Template.MaxSlotsY,
		&i.Template.CreatedAt,
		&i.Template.UpdatedAt,
		&i.Template.DeletedAt,
		&i.Template.CompanyID,
	)
	return i, err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
FROM templates
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTemplateByID(ctx context.Context, id int32) (Template, error) {
	row := q.db.QueryRow(ctx, getTemplateByID, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RequestID,
		&i.ProjectID,
		&i.Type,
		&i.Width,
		&i.Height,
		&i.SlotsX,
		&i.SlotsY,
		&i.MaxSlotsX,
		&i.MaxSlotsY,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID,
	)
	return i, err
}

const getTemplateDistortion = `-- name: GetTemplateDistortion :one
SELECT templates_distortions.id, templates_distortions.x, templates_distortions.y, templates_distortions.created_at, templates_distortions.updated_at, templates_distortions.deleted_at, templates_distortions.template_id
FROM templates_distortions
WHERE template_id = $1 LIMIT 1
`

type GetTemplateDistortionRow struct {
	TemplatesDistortion TemplatesDistortion `json:"templates_distortion"`
}

func (q *Queries) GetTemplateDistortion(ctx context.Context, templateID int32) (GetTemplateDistortionRow, error) {
	row := q.db.QueryRow(ctx, getTemplateDistortion, templateID)
	var i GetTemplateDistortionRow
	err := row.Scan(
		&i.TemplatesDistortion.ID,
		&i.TemplatesDistortion.X,
		&i.TemplatesDistortion.Y,
		&i.TemplatesDistortion.CreatedAt,
		&i.TemplatesDistortion.UpdatedAt,
		&i.TemplatesDistortion.DeletedAt,
		&i.TemplatesDistortion.TemplateID,
	)
	return i, err
}

const getTemplateSlots = `-- name: GetTemplateSlots :many
SELECT templates_slots.id, templates_slots.xi, templates_slots.yi, templates_slots.width, templates_slots.height, templates_slots.created_at, templates_slots.updated_at, templates_slots.deleted_at, templates_slots.template_id
FROM templates_slots
WHERE template_id = $1
`

type GetTemplateSlotsRow struct {
	TemplatesSlot TemplatesSlot `json:"templates_slot"`
}

func (q *Queries) GetTemplateSlots(ctx context.Context, templateID int32) ([]GetTemplateSlotsRow, error) {
	rows, err := q.db.Query(ctx, getTemplateSlots, templateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTemplateSlotsRow
	for rows.Next() {
		var i GetTemplateSlotsRow
		if err := rows.Scan(
			&i.TemplatesSlot.ID,
			&i.TemplatesSlot.Xi,
			&i.TemplatesSlot.Yi,
			&i.TemplatesSlot.Width,
			&i.TemplatesSlot.Height,
			&i.TemplatesSlot.CreatedAt,
			&i.TemplatesSlot.UpdatedAt,
			&i.TemplatesSlot.DeletedAt,
			&i.TemplatesSlot.TemplateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplatesByRequestID = `-- name: GetTemplatesByRequestID :many
SELECT id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
FROM templates
WHERE request_id = $1
`

func (q *Queries) GetTemplatesByRequestID(ctx context.Context, requestID pgtype.Text) ([]Template, error) {
	rows, err := q.db.Query(ctx, getTemplatesByRequestID, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RequestID,
			&i.ProjectID,
			&i.Type,
			&i.Width,
			&i.Height,
			&i.SlotsX,
			&i.SlotsY,
			&i.MaxSlotsX,
			&i.MaxSlotsY,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplates = `-- name: ListTemplates :many
SELECT id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
FROM templates
WHERE 
(company_id = $3 OR NOT $6)
AND (type = $4 OR NOT $7)
AND (project_id = $5 OR NOT $8)
AND deleted_at is NULL
LIMIT $1 OFFSET $2
`

type ListTemplatesParams struct {
	Limit           int32            `json:"limit"`
	Offset          int32            `json:"offset"`
	CompanyID       pgtype.Int4      `json:"company_id"`
	Type            NullTemplateType `json:"type"`
	ProjectID       pgtype.Int4      `json:"project_id"`
	FilterByCompany interface{}      `json:"filter_by_company"`
	FilterByType    interface{}      `json:"filter_by_type"`
	FilterByProject interface{}      `json:"filter_by_project"`
}

func (q *Queries) ListTemplates(ctx context.Context, arg ListTemplatesParams) ([]Template, error) {
	rows, err := q.db.Query(ctx, listTemplates,
		arg.Limit,
		arg.Offset,
		arg.CompanyID,
		arg.Type,
		arg.ProjectID,
		arg.FilterByCompany,
		arg.FilterByType,
		arg.FilterByProject,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RequestID,
			&i.ProjectID,
			&i.Type,
			&i.Width,
			&i.Height,
			&i.SlotsX,
			&i.SlotsY,
			&i.MaxSlotsX,
			&i.MaxSlotsY,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByProjectID = `-- name: ListTemplatesByProjectID :many
SELECT id, name, request_id, project_id, type, width, height, slots_x, slots_y, max_slots_x, max_slots_y, created_at, updated_at, deleted_at, company_id
FROM templates
WHERE project_id = $1
OFFSET $2 LIMIT $3
`

type ListTemplatesByProjectIDParams struct {
	ProjectID pgtype.Int4 `json:"project_id"`
	Offset    int32       `json:"offset"`
	Limit     int32       `json:"limit"`
}

func (q *Queries) ListTemplatesByProjectID(ctx context.Context, arg ListTemplatesByProjectIDParams) ([]Template, error) {
	rows, err := q.db.Query(ctx, listTemplatesByProjectID, arg.ProjectID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RequestID,
			&i.ProjectID,
			&i.Type,
			&i.Width,
			&i.Height,
			&i.SlotsX,
			&i.SlotsY,
			&i.MaxSlotsX,
			&i.MaxSlotsY,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalTemplatesByProjectID = `-- name: TotalTemplatesByProjectID :one
SELECT COUNT(*)
FROM templates
WHERE project_id = $1
`

func (q *Queries) TotalTemplatesByProjectID(ctx context.Context, projectID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, totalTemplatesByProjectID, projectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
