// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project_layouts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteProjectLayout = `-- name: DeleteProjectLayout :one
DELETE FROM project_layouts
WHERE id = 1
RETURNING id, layout_id, design_id, project_id, updated_at, created_at
`

func (q *Queries) DeleteProjectLayout(ctx context.Context) (ProjectLayout, error) {
	row := q.db.QueryRow(ctx, deleteProjectLayout)
	var i ProjectLayout
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.DesignID,
		&i.ProjectID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectLayoutsByProject = `-- name: ListProjectLayoutsByProject :many
SELECT layout.id, layout.design_id, layout.template_id, layout.request_id, layout.is_original, layout.image_url, layout.width, layout.height, layout.data, layout.stages, layout.created_at, layout.updated_at, layout.deleted_at, layout.company_id
FROM layout
INNER JOIN project_layouts AS pl ON pl.layout_id = layout.id
WHERE project_id = $1
`

func (q *Queries) ListProjectLayoutsByProject(ctx context.Context, projectID pgtype.Int4) ([]Layout, error) {
	rows, err := q.db.Query(ctx, listProjectLayoutsByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Layout
	for rows.Next() {
		var i Layout
		if err := rows.Scan(
			&i.ID,
			&i.DesignID,
			&i.TemplateID,
			&i.RequestID,
			&i.IsOriginal,
			&i.ImageUrl,
			&i.Width,
			&i.Height,
			&i.Data,
			&i.Stages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveProjectLayout = `-- name: SaveProjectLayout :one
INSERT INTO project_layouts (layout_id, design_id, project_id, updated_at)
VALUES ($1, $2, $3, NOW())
RETURNING id, layout_id, design_id, project_id, updated_at, created_at
`

type SaveProjectLayoutParams struct {
	LayoutID  pgtype.Int4 `json:"layout_id"`
	DesignID  pgtype.Int4 `json:"design_id"`
	ProjectID pgtype.Int4 `json:"project_id"`
}

func (q *Queries) SaveProjectLayout(ctx context.Context, arg SaveProjectLayoutParams) (ProjectLayout, error) {
	row := q.db.QueryRow(ctx, saveProjectLayout, arg.LayoutID, arg.DesignID, arg.ProjectID)
	var i ProjectLayout
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.DesignID,
		&i.ProjectID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
