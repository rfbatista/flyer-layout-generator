// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: design_assetss.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDesignAsset = `-- name: CreateDesignAsset :one
INSERT INTO design_assets (project_id, alternative_to, asset_url, asset_path, design_id, type, name, width, height, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP)
RETURNING id, project_id, design_id, alternative_to, name, width, type, asset_url, asset_path, height, created_at, updated_at
`

type CreateDesignAssetParams struct {
	ProjectID     pgtype.Int4         `json:"project_id"`
	AlternativeTo pgtype.Int4         `json:"alternative_to"`
	AssetUrl      pgtype.Text         `json:"asset_url"`
	AssetPath     pgtype.Text         `json:"asset_path"`
	DesignID      pgtype.Int4         `json:"design_id"`
	Type          NullDesignAssetType `json:"type"`
	Name          string              `json:"name"`
	Width         pgtype.Int4         `json:"width"`
	Height        pgtype.Int4         `json:"height"`
}

func (q *Queries) CreateDesignAsset(ctx context.Context, arg CreateDesignAssetParams) (DesignAsset, error) {
	row := q.db.QueryRow(ctx, createDesignAsset,
		arg.ProjectID,
		arg.AlternativeTo,
		arg.AssetUrl,
		arg.AssetPath,
		arg.DesignID,
		arg.Type,
		arg.Name,
		arg.Width,
		arg.Height,
	)
	var i DesignAsset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DesignID,
		&i.AlternativeTo,
		&i.Name,
		&i.Width,
		&i.Type,
		&i.AssetUrl,
		&i.AssetPath,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDesignAssetProperty = `-- name: CreateDesignAssetProperty :exec
INSERT INTO design_assets_properties (asset_id, key, value, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
`

type CreateDesignAssetPropertyParams struct {
	AssetID pgtype.Int4 `json:"asset_id"`
	Key     string      `json:"key"`
	Value   string      `json:"value"`
}

func (q *Queries) CreateDesignAssetProperty(ctx context.Context, arg CreateDesignAssetPropertyParams) error {
	_, err := q.db.Exec(ctx, createDesignAssetProperty, arg.AssetID, arg.Key, arg.Value)
	return err
}

const getDesignAssetByDesignID = `-- name: GetDesignAssetByDesignID :many
SELECT id, project_id, design_id, alternative_to, name, width, type, asset_url, asset_path, height, created_at, updated_at
FROM design_assets
WHERE design_id = $1
`

func (q *Queries) GetDesignAssetByDesignID(ctx context.Context, designID pgtype.Int4) ([]DesignAsset, error) {
	rows, err := q.db.Query(ctx, getDesignAssetByDesignID, designID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DesignAsset
	for rows.Next() {
		var i DesignAsset
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DesignID,
			&i.AlternativeTo,
			&i.Name,
			&i.Width,
			&i.Type,
			&i.AssetUrl,
			&i.AssetPath,
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDesignAssetByID = `-- name: GetDesignAssetByID :one
SELECT id, project_id, design_id, alternative_to, name, width, type, asset_url, asset_path, height, created_at, updated_at
FROM design_assets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDesignAssetByID(ctx context.Context, id int32) (DesignAsset, error) {
	row := q.db.QueryRow(ctx, getDesignAssetByID, id)
	var i DesignAsset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DesignID,
		&i.AlternativeTo,
		&i.Name,
		&i.Width,
		&i.Type,
		&i.AssetUrl,
		&i.AssetPath,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDesignAssetByProjectID = `-- name: GetDesignAssetByProjectID :many
SELECT id, project_id, design_id, alternative_to, name, width, type, asset_url, asset_path, height, created_at, updated_at
FROM design_assets
WHERE project_id = $1
`

func (q *Queries) GetDesignAssetByProjectID(ctx context.Context, projectID pgtype.Int4) ([]DesignAsset, error) {
	rows, err := q.db.Query(ctx, getDesignAssetByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DesignAsset
	for rows.Next() {
		var i DesignAsset
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DesignID,
			&i.AlternativeTo,
			&i.Name,
			&i.Width,
			&i.Type,
			&i.AssetUrl,
			&i.AssetPath,
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDesignAssetPropertyByAssetID = `-- name: GetDesignAssetPropertyByAssetID :many
SELECT id, asset_id, key, value, created_at, updated_at
FROM design_assets_properties
WHERE asset_id = $1
`

func (q *Queries) GetDesignAssetPropertyByAssetID(ctx context.Context, assetID pgtype.Int4) ([]DesignAssetsProperty, error) {
	rows, err := q.db.Query(ctx, getDesignAssetPropertyByAssetID, assetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DesignAssetsProperty
	for rows.Next() {
		var i DesignAssetsProperty
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
