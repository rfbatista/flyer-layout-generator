// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: companies_api_credentials.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPICredential = `-- name: CreateAPICredential :exec
INSERT INTO companies_api_credentials (name, api_key, company_id)
VALUES ($1, $2, $3)
`

type CreateAPICredentialParams struct {
	Name      pgtype.Text `json:"name"`
	ApiKey    string      `json:"api_key"`
	CompanyID pgtype.Int4 `json:"company_id"`
}

func (q *Queries) CreateAPICredential(ctx context.Context, arg CreateAPICredentialParams) error {
	_, err := q.db.Exec(ctx, createAPICredential, arg.Name, arg.ApiKey, arg.CompanyID)
	return err
}

const deleteAPICredetial = `-- name: DeleteAPICredetial :exec
DELETE FROM companies_api_credentials
WHERE id = $1
`

func (q *Queries) DeleteAPICredetial(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAPICredetial, id)
	return err
}

const listAPICredetialsByCompany = `-- name: ListAPICredetialsByCompany :many
SELECT id, name, api_key, created_at, updated_at, deleted_at, company_id FROM companies_api_credentials WHERE deleted_at IS NULL AND company_id = $1
`

func (q *Queries) ListAPICredetialsByCompany(ctx context.Context, companyID pgtype.Int4) ([]CompaniesApiCredential, error) {
	rows, err := q.db.Query(ctx, listAPICredetialsByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompaniesApiCredential
	for rows.Next() {
		var i CompaniesApiCredential
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
