// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: templates.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO templates (
  name,
  type,
  width,
  height
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, name, type, width, height, slots_x, slots_y, created_at, updated_at, deleted_at
`

type CreateTemplateParams struct {
	Name   string           `json:"name"`
	Type   NullTemplateType `json:"type"`
	Width  pgtype.Int4      `json:"width"`
	Height pgtype.Int4      `json:"height"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.Name,
		arg.Type,
		arg.Width,
		arg.Height,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Width,
		&i.Height,
		&i.SlotsX,
		&i.SlotsY,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createTemplateDistortions = `-- name: CreateTemplateDistortions :one
INSERT INTO templates_distortions (
  x,
  y,
  template_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, x, y, created_at, updated_at, deleted_at, template_id
`

type CreateTemplateDistortionsParams struct {
	X          pgtype.Int4 `json:"x"`
	Y          pgtype.Int4 `json:"y"`
	TemplateID int32       `json:"template_id"`
}

func (q *Queries) CreateTemplateDistortions(ctx context.Context, arg CreateTemplateDistortionsParams) (TemplatesDistortion, error) {
	row := q.db.QueryRow(ctx, createTemplateDistortions, arg.X, arg.Y, arg.TemplateID)
	var i TemplatesDistortion
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TemplateID,
	)
	return i, err
}

const createTemplateSlot = `-- name: CreateTemplateSlot :one
INSERT INTO templates_slots (
  xi,
  yi,
  width,
  height,
  template_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, xi, yi, width, height, created_at, updated_at, deleted_at, template_id
`

type CreateTemplateSlotParams struct {
	Xi         pgtype.Int4 `json:"xi"`
	Yi         pgtype.Int4 `json:"yi"`
	Width      pgtype.Int4 `json:"width"`
	Height     pgtype.Int4 `json:"height"`
	TemplateID int32       `json:"template_id"`
}

func (q *Queries) CreateTemplateSlot(ctx context.Context, arg CreateTemplateSlotParams) (TemplatesSlot, error) {
	row := q.db.QueryRow(ctx, createTemplateSlot,
		arg.Xi,
		arg.Yi,
		arg.Width,
		arg.Height,
		arg.TemplateID,
	)
	var i TemplatesSlot
	err := row.Scan(
		&i.ID,
		&i.Xi,
		&i.Yi,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TemplateID,
	)
	return i, err
}

const getTemplate = `-- name: GetTemplate :one
SELECT templates.id, templates.name, templates.type, templates.width, templates.height, templates.slots_x, templates.slots_y, templates.created_at, templates.updated_at, templates.deleted_at
FROM templates
WHERE templates.id = $1 LIMIT 1
`

type GetTemplateRow struct {
	Template Template `json:"template"`
}

func (q *Queries) GetTemplate(ctx context.Context, id int32) (GetTemplateRow, error) {
	row := q.db.QueryRow(ctx, getTemplate, id)
	var i GetTemplateRow
	err := row.Scan(
		&i.Template.ID,
		&i.Template.Name,
		&i.Template.Type,
		&i.Template.Width,
		&i.Template.Height,
		&i.Template.SlotsX,
		&i.Template.SlotsY,
		&i.Template.CreatedAt,
		&i.Template.UpdatedAt,
		&i.Template.DeletedAt,
	)
	return i, err
}

const getTemplateDistortion = `-- name: GetTemplateDistortion :one
SELECT templates_distortions.id, templates_distortions.x, templates_distortions.y, templates_distortions.created_at, templates_distortions.updated_at, templates_distortions.deleted_at, templates_distortions.template_id
FROM templates_distortions
WHERE template_id = $1 LIMIT 1
`

type GetTemplateDistortionRow struct {
	TemplatesDistortion TemplatesDistortion `json:"templates_distortion"`
}

func (q *Queries) GetTemplateDistortion(ctx context.Context, templateID int32) (GetTemplateDistortionRow, error) {
	row := q.db.QueryRow(ctx, getTemplateDistortion, templateID)
	var i GetTemplateDistortionRow
	err := row.Scan(
		&i.TemplatesDistortion.ID,
		&i.TemplatesDistortion.X,
		&i.TemplatesDistortion.Y,
		&i.TemplatesDistortion.CreatedAt,
		&i.TemplatesDistortion.UpdatedAt,
		&i.TemplatesDistortion.DeletedAt,
		&i.TemplatesDistortion.TemplateID,
	)
	return i, err
}

const getTemplateSlots = `-- name: GetTemplateSlots :many
SELECT templates_slots.id, templates_slots.xi, templates_slots.yi, templates_slots.width, templates_slots.height, templates_slots.created_at, templates_slots.updated_at, templates_slots.deleted_at, templates_slots.template_id
FROM templates_slots
WHERE template_id = $1
`

type GetTemplateSlotsRow struct {
	TemplatesSlot TemplatesSlot `json:"templates_slot"`
}

func (q *Queries) GetTemplateSlots(ctx context.Context, templateID int32) ([]GetTemplateSlotsRow, error) {
	rows, err := q.db.Query(ctx, getTemplateSlots, templateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTemplateSlotsRow
	for rows.Next() {
		var i GetTemplateSlotsRow
		if err := rows.Scan(
			&i.TemplatesSlot.ID,
			&i.TemplatesSlot.Xi,
			&i.TemplatesSlot.Yi,
			&i.TemplatesSlot.Width,
			&i.TemplatesSlot.Height,
			&i.TemplatesSlot.CreatedAt,
			&i.TemplatesSlot.UpdatedAt,
			&i.TemplatesSlot.DeletedAt,
			&i.TemplatesSlot.TemplateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplates = `-- name: ListTemplates :many
SELECT templates.id, templates.name, templates.type, templates.width, templates.height, templates.slots_x, templates.slots_y, templates.created_at, templates.updated_at, templates.deleted_at, templates_slots.id, templates_slots.xi, templates_slots.yi, templates_slots.width, templates_slots.height, templates_slots.created_at, templates_slots.updated_at, templates_slots.deleted_at, templates_slots.template_id, templates_distortions.id, templates_distortions.x, templates_distortions.y, templates_distortions.created_at, templates_distortions.updated_at, templates_distortions.deleted_at, templates_distortions.template_id
FROM templates
JOIN templates_slots ON templates_slots.template_id = templates.id
JOIN templates_distortions ON templates_distortions.template_id = templates.id
LIMIT $1 OFFSET $2
`

type ListTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTemplatesRow struct {
	Template            Template            `json:"template"`
	TemplatesSlot       TemplatesSlot       `json:"templates_slot"`
	TemplatesDistortion TemplatesDistortion `json:"templates_distortion"`
}

func (q *Queries) ListTemplates(ctx context.Context, arg ListTemplatesParams) ([]ListTemplatesRow, error) {
	rows, err := q.db.Query(ctx, listTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTemplatesRow
	for rows.Next() {
		var i ListTemplatesRow
		if err := rows.Scan(
			&i.Template.ID,
			&i.Template.Name,
			&i.Template.Type,
			&i.Template.Width,
			&i.Template.Height,
			&i.Template.SlotsX,
			&i.Template.SlotsY,
			&i.Template.CreatedAt,
			&i.Template.UpdatedAt,
			&i.Template.DeletedAt,
			&i.TemplatesSlot.ID,
			&i.TemplatesSlot.Xi,
			&i.TemplatesSlot.Yi,
			&i.TemplatesSlot.Width,
			&i.TemplatesSlot.Height,
			&i.TemplatesSlot.CreatedAt,
			&i.TemplatesSlot.UpdatedAt,
			&i.TemplatesSlot.DeletedAt,
			&i.TemplatesSlot.TemplateID,
			&i.TemplatesDistortion.ID,
			&i.TemplatesDistortion.X,
			&i.TemplatesDistortion.Y,
			&i.TemplatesDistortion.CreatedAt,
			&i.TemplatesDistortion.UpdatedAt,
			&i.TemplatesDistortion.DeletedAt,
			&i.TemplatesDistortion.TemplateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
