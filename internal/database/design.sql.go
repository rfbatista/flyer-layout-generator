// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: design.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createdesign = `-- name: Createdesign :one
INSERT INTO design (
  name,
  file_url
) VALUES (
  $1,
  $2
)
RETURNING id, name, image_url, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

type CreatedesignParams struct {
	Name    string      `json:"name"`
	FileUrl pgtype.Text `json:"file_url"`
}

func (q *Queries) Createdesign(ctx context.Context, arg CreatedesignParams) (Design, error) {
	row := q.db.QueryRow(ctx, createdesign, arg.Name, arg.FileUrl)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setDesignAsProccessed = `-- name: SetDesignAsProccessed :one
UPDATE design
SET
    is_proccessed = true
WHERE
    id = $1
RETURNING id, name, image_url, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

func (q *Queries) SetDesignAsProccessed(ctx context.Context, designID int32) (Design, error) {
	row := q.db.QueryRow(ctx, setDesignAsProccessed, designID)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDesignByID = `-- name: UpdateDesignByID :one
UPDATE design
SET
    name = CASE WHEN $1::boolean
        THEN $2 ELSE name END,

    image_url = CASE WHEN $3::boolean
        THEN $4 ELSE name END,

    width = CASE WHEN $5::boolean
        THEN $6 ELSE width END,

    height = CASE WHEN $7::boolean
        THEN $8 ELSE height END

WHERE
    id = $9
RETURNING id, name, image_url, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

type UpdateDesignByIDParams struct {
	NameDoUpdate     bool        `json:"name_do_update"`
	Name             pgtype.Text `json:"name"`
	ImageUrlDoUpdate bool        `json:"image_url_do_update"`
	ImageUrl         pgtype.Text `json:"image_url"`
	WidthDoUpdate    bool        `json:"width_do_update"`
	Width            pgtype.Int4 `json:"width"`
	HeightDoUpdate   bool        `json:"height_do_update"`
	Height           pgtype.Int4 `json:"height"`
	DesignID         int32       `json:"design_id"`
}

// You can use sqlc.arg() and @ to identify named parameters
func (q *Queries) UpdateDesignByID(ctx context.Context, arg UpdateDesignByIDParams) (Design, error) {
	row := q.db.QueryRow(ctx, updateDesignByID,
		arg.NameDoUpdate,
		arg.Name,
		arg.ImageUrlDoUpdate,
		arg.ImageUrl,
		arg.WidthDoUpdate,
		arg.Width,
		arg.HeightDoUpdate,
		arg.Height,
		arg.DesignID,
	)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
