// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: photoshop.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createElement = `-- name: CreateElement :one
INSERT INTO design_element (
  layer_id,
  design_id,
  name,
  text,
  xi,
  xii,
  yi,
  yii,
  width,
  height,
  is_group,
  group_id,
  level,
  kind,
  component_id,
  image_url,
  inner_xi ,
  inner_xii,
  inner_yi ,
  inner_yii,
  image_extension
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17,
  $18,
  $19,
  $20,
  $21
)
RETURNING id, design_id, name, layer_id, text, xi, xii, yi, yii, inner_xi, inner_xii, inner_yi, inner_yii, width, height, is_group, group_id, level, kind, component_id, image_url, image_extension, created_at, updated_at
`

type CreateElementParams struct {
	LayerID        pgtype.Text `json:"layer_id"`
	DesignID       int32       `json:"design_id"`
	Name           pgtype.Text `json:"name"`
	Text           pgtype.Text `json:"text"`
	Xi             pgtype.Int4 `json:"xi"`
	Xii            pgtype.Int4 `json:"xii"`
	Yi             pgtype.Int4 `json:"yi"`
	Yii            pgtype.Int4 `json:"yii"`
	Width          pgtype.Int4 `json:"width"`
	Height         pgtype.Int4 `json:"height"`
	IsGroup        pgtype.Bool `json:"is_group"`
	GroupID        pgtype.Int4 `json:"group_id"`
	Level          pgtype.Int4 `json:"level"`
	Kind           pgtype.Text `json:"kind"`
	ComponentID    pgtype.Int4 `json:"component_id"`
	ImageUrl       pgtype.Text `json:"image_url"`
	InnerXi        pgtype.Int4 `json:"inner_xi"`
	InnerXii       pgtype.Int4 `json:"inner_xii"`
	InnerYi        pgtype.Int4 `json:"inner_yi"`
	InnerYii       pgtype.Int4 `json:"inner_yii"`
	ImageExtension pgtype.Text `json:"image_extension"`
}

func (q *Queries) CreateElement(ctx context.Context, arg CreateElementParams) (DesignElement, error) {
	row := q.db.QueryRow(ctx, createElement,
		arg.LayerID,
		arg.DesignID,
		arg.Name,
		arg.Text,
		arg.Xi,
		arg.Xii,
		arg.Yi,
		arg.Yii,
		arg.Width,
		arg.Height,
		arg.IsGroup,
		arg.GroupID,
		arg.Level,
		arg.Kind,
		arg.ComponentID,
		arg.ImageUrl,
		arg.InnerXi,
		arg.InnerXii,
		arg.InnerYi,
		arg.InnerYii,
		arg.ImageExtension,
	)
	var i DesignElement
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.Name,
		&i.LayerID,
		&i.Text,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.InnerXi,
		&i.InnerXii,
		&i.InnerYi,
		&i.InnerYii,
		&i.Width,
		&i.Height,
		&i.IsGroup,
		&i.GroupID,
		&i.Level,
		&i.Kind,
		&i.ComponentID,
		&i.ImageUrl,
		&i.ImageExtension,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getdesign = `-- name: Getdesign :one
SELECT id, name, image_url, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at FROM design
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getdesign(ctx context.Context, id int32) (Design, error) {
	row := q.db.QueryRow(ctx, getdesign, id)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getdesignBackgroundComponent = `-- name: GetdesignBackgroundComponent :one
SELECT id, design_id, width, height, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, priority, inner_xi, inner_xii, inner_yi, inner_yii, created_at FROM design_components
WHERE design_id = $1 AND type = 'background' LIMIT 1
`

func (q *Queries) GetdesignBackgroundComponent(ctx context.Context, designID int32) (DesignComponent, error) {
	row := q.db.QueryRow(ctx, getdesignBackgroundComponent, designID)
	var i DesignComponent
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.Color,
		&i.Type,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.BboxXi,
		&i.BboxXii,
		&i.BboxYi,
		&i.BboxYii,
		&i.Priority,
		&i.InnerXi,
		&i.InnerXii,
		&i.InnerYi,
		&i.InnerYii,
		&i.CreatedAt,
	)
	return i, err
}

const getdesignComponentByID = `-- name: GetdesignComponentByID :one
SELECT id, design_id, width, height, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, priority, inner_xi, inner_xii, inner_yi, inner_yii, created_at FROM design_components
WHERE design_id = $1 LIMIT 1
`

func (q *Queries) GetdesignComponentByID(ctx context.Context, designID int32) (DesignComponent, error) {
	row := q.db.QueryRow(ctx, getdesignComponentByID, designID)
	var i DesignComponent
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.Color,
		&i.Type,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.BboxXi,
		&i.BboxXii,
		&i.BboxYi,
		&i.BboxYii,
		&i.Priority,
		&i.InnerXi,
		&i.InnerXii,
		&i.InnerYi,
		&i.InnerYii,
		&i.CreatedAt,
	)
	return i, err
}

const listdesign = `-- name: Listdesign :many
SELECT id, name, image_url, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at FROM design
OFFSET $1 LIMIT $2
`

type ListdesignParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) Listdesign(ctx context.Context, arg ListdesignParams) ([]Design, error) {
	rows, err := q.db.Query(ctx, listdesign, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Design
	for rows.Next() {
		var i Design
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.ImageExtension,
			&i.FileUrl,
			&i.FileExtension,
			&i.Width,
			&i.Height,
			&i.IsProccessed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listdesignElements = `-- name: ListdesignElements :many
SELECT id, design_id, name, layer_id, text, xi, xii, yi, yii, inner_xi, inner_xii, inner_yi, inner_yii, width, height, is_group, group_id, level, kind, component_id, image_url, image_extension, created_at, updated_at FROM design_element 
WHERE design_id = $1
LIMIT $2 OFFSET $3
`

type ListdesignElementsParams struct {
	DesignID int32 `json:"design_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListdesignElements(ctx context.Context, arg ListdesignElementsParams) ([]DesignElement, error) {
	rows, err := q.db.Query(ctx, listdesignElements, arg.DesignID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DesignElement
	for rows.Next() {
		var i DesignElement
		if err := rows.Scan(
			&i.ID,
			&i.DesignID,
			&i.Name,
			&i.LayerID,
			&i.Text,
			&i.Xi,
			&i.Xii,
			&i.Yi,
			&i.Yii,
			&i.InnerXi,
			&i.InnerXii,
			&i.InnerYi,
			&i.InnerYii,
			&i.Width,
			&i.Height,
			&i.IsGroup,
			&i.GroupID,
			&i.Level,
			&i.Kind,
			&i.ComponentID,
			&i.ImageUrl,
			&i.ImageExtension,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
