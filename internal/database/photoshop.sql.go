// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: photoshop.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createElement = `-- name: CreateElement :one
INSERT INTO photoshop_element (
  layer_id,
  photoshop_id,
  name,
  text,
  xi,
  xii,
  yi,
  yii,
  width,
  height,
  is_group,
  group_id,
  level,
  kind,
  component_id,
  component_type,
  image_url
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17
)
RETURNING id, photoshop_id, name, layer_id, text, xi, xii, yi, yii, width, height, is_group, group_id, level, kind, component_id, component_type, image_url, created_at, updated_at
`

type CreateElementParams struct {
	LayerID       pgtype.Text
	PhotoshopID   int32
	Name          pgtype.Text
	Text          pgtype.Text
	Xi            pgtype.Int4
	Xii           pgtype.Int4
	Yi            pgtype.Int4
	Yii           pgtype.Int4
	Width         pgtype.Int4
	Height        pgtype.Int4
	IsGroup       pgtype.Bool
	GroupID       pgtype.Int4
	Level         pgtype.Int4
	Kind          pgtype.Text
	ComponentID   pgtype.Text
	ComponentType NullComponentType
	ImageUrl      pgtype.Text
}

func (q *Queries) CreateElement(ctx context.Context, arg CreateElementParams) (PhotoshopElement, error) {
	row := q.db.QueryRow(ctx, createElement,
		arg.LayerID,
		arg.PhotoshopID,
		arg.Name,
		arg.Text,
		arg.Xi,
		arg.Xii,
		arg.Yi,
		arg.Yii,
		arg.Width,
		arg.Height,
		arg.IsGroup,
		arg.GroupID,
		arg.Level,
		arg.Kind,
		arg.ComponentID,
		arg.ComponentType,
		arg.ImageUrl,
	)
	var i PhotoshopElement
	err := row.Scan(
		&i.ID,
		&i.PhotoshopID,
		&i.Name,
		&i.LayerID,
		&i.Text,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.Width,
		&i.Height,
		&i.IsGroup,
		&i.GroupID,
		&i.Level,
		&i.Kind,
		&i.ComponentID,
		&i.ComponentType,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPhotoshop = `-- name: CreatePhotoshop :one
INSERT INTO photoshop (
  name,
  image_url,
  file_url
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, name, image_url, file_url, created_at, updated_at
`

type CreatePhotoshopParams struct {
	Name     string
	ImageUrl pgtype.Text
	FileUrl  pgtype.Text
}

func (q *Queries) CreatePhotoshop(ctx context.Context, arg CreatePhotoshopParams) (Photoshop, error) {
	row := q.db.QueryRow(ctx, createPhotoshop, arg.Name, arg.ImageUrl, arg.FileUrl)
	var i Photoshop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPhotoshop = `-- name: GetPhotoshop :one
SELECT id, name, image_url, file_url, created_at, updated_at FROM photoshop
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPhotoshop(ctx context.Context, id int32) (Photoshop, error) {
	row := q.db.QueryRow(ctx, getPhotoshop, id)
	var i Photoshop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPhotoshopElements = `-- name: ListPhotoshopElements :many
SELECT id, photoshop_id, name, layer_id, text, xi, xii, yi, yii, width, height, is_group, group_id, level, kind, component_id, component_type, image_url, created_at, updated_at FROM photoshop_element 
WHERE photoshop_id = $1
LIMIT $2 OFFSET $3
`

type ListPhotoshopElementsParams struct {
	PhotoshopID int32
	Limit       int32
	Offset      int32
}

func (q *Queries) ListPhotoshopElements(ctx context.Context, arg ListPhotoshopElementsParams) ([]PhotoshopElement, error) {
	rows, err := q.db.Query(ctx, listPhotoshopElements, arg.PhotoshopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhotoshopElement
	for rows.Next() {
		var i PhotoshopElement
		if err := rows.Scan(
			&i.ID,
			&i.PhotoshopID,
			&i.Name,
			&i.LayerID,
			&i.Text,
			&i.Xi,
			&i.Xii,
			&i.Yi,
			&i.Yii,
			&i.Width,
			&i.Height,
			&i.IsGroup,
			&i.GroupID,
			&i.Level,
			&i.Kind,
			&i.ComponentID,
			&i.ComponentType,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setComponent = `-- name: SetComponent :exec
UPDATE photoshop_element 
SET component_id = $2, component_type = $3
WHERE id = $1
`

type SetComponentParams struct {
	ID            int32
	ComponentID   pgtype.Text
	ComponentType NullComponentType
}

func (q *Queries) SetComponent(ctx context.Context, arg SetComponentParams) error {
	_, err := q.db.Exec(ctx, setComponent, arg.ID, arg.ComponentID, arg.ComponentType)
	return err
}
