// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: projects.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  name,
  client_id,
  advertiser_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, client_id, advertiser_id, briefing, name, created_at, updated_at, deleted_at
`

type CreateProjectParams struct {
	Name         string      `json:"name"`
	ClientID     pgtype.Int4 `json:"client_id"`
	AdvertiserID pgtype.Int4 `json:"advertiser_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.ClientID, arg.AdvertiserID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.AdvertiserID,
		&i.Briefing,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, client_id, advertiser_id, briefing, name, created_at, updated_at, deleted_at
FROM projects
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.AdvertiserID,
		&i.Briefing,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, client_id, advertiser_id, briefing, name, created_at, updated_at, deleted_at
FROM projects
LIMIT $1 OFFSET $2
`

type ListProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.AdvertiserID,
			&i.Briefing,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
