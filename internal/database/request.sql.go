// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: request.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const finishRequestProcess = `-- name: FinishRequestProcess :one
UPDATE request
SET
    finished_at = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, started_at, finished_at, created_at, updated_at, deleted_at
`

type FinishRequestProcessParams struct {
	ID         int32            `json:"id"`
	FinishedAt pgtype.Timestamp `json:"finished_at"`
}

func (q *Queries) FinishRequestProcess(ctx context.Context, arg FinishRequestProcessParams) (Request, error) {
	row := q.db.QueryRow(ctx, finishRequestProcess, arg.ID, arg.FinishedAt)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const starRequestStep = `-- name: StarRequestStep :one
INSERT INTO request_steps
( name, request_id, started_at)
VALUES ($1,$2,$3)
RETURNING id, name, request_id, started_at, finished_at, error_at, log, created_at, updated_at
`

type StarRequestStepParams struct {
	Name      string           `json:"name"`
	RequestID int32            `json:"request_id"`
	StartedAt pgtype.Timestamp `json:"started_at"`
}

func (q *Queries) StarRequestStep(ctx context.Context, arg StarRequestStepParams) (RequestStep, error) {
	row := q.db.QueryRow(ctx, starRequestStep, arg.Name, arg.RequestID, arg.StartedAt)
	var i RequestStep
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RequestID,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ErrorAt,
		&i.Log,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const startRequestProcess = `-- name: StartRequestProcess :one
INSERT INTO request (name, started_at)
VALUES ($1, $2)
RETURNING id, name, started_at, finished_at, created_at, updated_at, deleted_at
`

type StartRequestProcessParams struct {
	Name      string           `json:"name"`
	StartedAt pgtype.Timestamp `json:"started_at"`
}

func (q *Queries) StartRequestProcess(ctx context.Context, arg StartRequestProcessParams) (Request, error) {
	row := q.db.QueryRow(ctx, startRequestProcess, arg.Name, arg.StartedAt)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateRequestStep = `-- name: UpdateRequestStep :one
UPDATE request_steps
SET
    log = CASE WHEN $1::boolean
                    THEN $2 ELSE log END,
    error_at = CASE WHEN $3::boolean
                   THEN $4 ELSE error_at END,
    finished_at = CASE WHEN $5::boolean
                        THEN $6 ELSE finished_at END,
    updated_at = now()
WHERE id = $7
RETURNING id, name, request_id, started_at, finished_at, error_at, log, created_at, updated_at
`

type UpdateRequestStepParams struct {
	DoAddLog        bool             `json:"do_add_log"`
	Log             pgtype.Text      `json:"log"`
	DoAddErrorAt    bool             `json:"do_add_error_at"`
	ErrorAt         pgtype.Timestamp `json:"error_at"`
	DoAddFinishedAt bool             `json:"do_add_finished_at"`
	FinishedAt      pgtype.Timestamp `json:"finished_at"`
	RequestStepID   int32            `json:"request_step_id"`
}

func (q *Queries) UpdateRequestStep(ctx context.Context, arg UpdateRequestStepParams) (RequestStep, error) {
	row := q.db.QueryRow(ctx, updateRequestStep,
		arg.DoAddLog,
		arg.Log,
		arg.DoAddErrorAt,
		arg.ErrorAt,
		arg.DoAddFinishedAt,
		arg.FinishedAt,
		arg.RequestStepID,
	)
	var i RequestStep
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RequestID,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ErrorAt,
		&i.Log,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
