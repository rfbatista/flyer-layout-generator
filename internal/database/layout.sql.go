// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: layout.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLayout = `-- name: CreateLayout :one
INSERT INTO layout (width, height, design_id) VALUES ($1, $2, $3) RETURNING id, design_id, width, height, created_at, updated_at, deleted_at
`

type CreateLayoutParams struct {
	Width    pgtype.Int4 `json:"width"`
	Height   pgtype.Int4 `json:"height"`
	DesignID pgtype.Int4 `json:"design_id"`
}

func (q *Queries) CreateLayout(ctx context.Context, arg CreateLayoutParams) (Layout, error) {
	row := q.db.QueryRow(ctx, createLayout, arg.Width, arg.Height, arg.DesignID)
	var i Layout
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createLayoutComponent = `-- name: CreateLayoutComponent :one
INSERT INTO layout_components (
  layout_id,
  design_id, 
  width, 
  height, 
  color, 
  type, 
  xi, 
  xii, 
  yi, 
  yii, 
  bbox_xi, 
  bbox_xii, 
  bbox_yi, 
  bbox_yii
) VALUES (
  $1,         -- design_id
  $2,       -- width
  $3,       -- height
  $4,     -- color
  $5,   -- type (assuming COMPONENT_TYPE allows 'IMAGE')
  $6,        -- xi
  $7,        -- xii
  $8,        -- yi
  $9,        -- yii
  $10,        -- bbox_xi
  $11,        -- bbox_xii
  $12,        -- bbox_yi
  $13,         -- bbox_yii
  $14
)
RETURNING id, design_id, layout_id, width, height, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, created_at, updated_at, deleted_at
`

type CreateLayoutComponentParams struct {
	LayoutID int32       `json:"layout_id"`
	DesignID int32       `json:"design_id"`
	Width    pgtype.Int4 `json:"width"`
	Height   pgtype.Int4 `json:"height"`
	Color    pgtype.Text `json:"color"`
	Type     pgtype.Text `json:"type"`
	Xi       pgtype.Int4 `json:"xi"`
	Xii      pgtype.Int4 `json:"xii"`
	Yi       pgtype.Int4 `json:"yi"`
	Yii      pgtype.Int4 `json:"yii"`
	BboxXi   pgtype.Int4 `json:"bbox_xi"`
	BboxXii  pgtype.Int4 `json:"bbox_xii"`
	BboxYi   pgtype.Int4 `json:"bbox_yi"`
	BboxYii  pgtype.Int4 `json:"bbox_yii"`
}

func (q *Queries) CreateLayoutComponent(ctx context.Context, arg CreateLayoutComponentParams) (LayoutComponent, error) {
	row := q.db.QueryRow(ctx, createLayoutComponent,
		arg.LayoutID,
		arg.DesignID,
		arg.Width,
		arg.Height,
		arg.Color,
		arg.Type,
		arg.Xi,
		arg.Xii,
		arg.Yi,
		arg.Yii,
		arg.BboxXi,
		arg.BboxXii,
		arg.BboxYi,
		arg.BboxYii,
	)
	var i LayoutComponent
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.LayoutID,
		&i.Width,
		&i.Height,
		&i.Color,
		&i.Type,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.BboxXi,
		&i.BboxXii,
		&i.BboxYi,
		&i.BboxYii,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createLayoutRegion = `-- name: CreateLayoutRegion :one
INSERT INTO layout_region (
  layout_id,
  xi, 
  xii, 
  yi, 
  yii 
) VALUES (
  $1,  -- url
  $2,                             -- photoshop_id
  $3,                             -- template_id
  $4,           -- created_at
  $5
) 
RETURNING id, layout_id, xi, xii, yi, yii, created_at, updated_at, deleted_at
`

type CreateLayoutRegionParams struct {
	LayoutID int32       `json:"layout_id"`
	Xi       pgtype.Int4 `json:"xi"`
	Xii      pgtype.Int4 `json:"xii"`
	Yi       pgtype.Int4 `json:"yi"`
	Yii      pgtype.Int4 `json:"yii"`
}

func (q *Queries) CreateLayoutRegion(ctx context.Context, arg CreateLayoutRegionParams) (LayoutRegion, error) {
	row := q.db.QueryRow(ctx, createLayoutRegion,
		arg.LayoutID,
		arg.Xi,
		arg.Xii,
		arg.Yi,
		arg.Yii,
	)
	var i LayoutRegion
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createLayoutTemplate = `-- name: CreateLayoutTemplate :one
INSERT INTO layout_template (
  layout_id,
  type, 
  width, 
  height 
) VALUES (
  $1,         
  $2,           
  $3,             
  $4
)
RETURNING id, layout_id, type, width, height, slots_x, slots_y, created_at, updated_at, deleted_at
`

type CreateLayoutTemplateParams struct {
	LayoutID int32       `json:"layout_id"`
	Type     pgtype.Text `json:"type"`
	Width    pgtype.Int4 `json:"width"`
	Height   pgtype.Int4 `json:"height"`
}

func (q *Queries) CreateLayoutTemplate(ctx context.Context, arg CreateLayoutTemplateParams) (LayoutTemplate, error) {
	row := q.db.QueryRow(ctx, createLayoutTemplate,
		arg.LayoutID,
		arg.Type,
		arg.Width,
		arg.Height,
	)
	var i LayoutTemplate
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.Type,
		&i.Width,
		&i.Height,
		&i.SlotsX,
		&i.SlotsY,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getLayoutByID = `-- name: GetLayoutByID :one
SELECT id, design_id, width, height, created_at, updated_at, deleted_at FROM layout 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLayoutByID(ctx context.Context, id int64) (Layout, error) {
	row := q.db.QueryRow(ctx, getLayoutByID, id)
	var i Layout
	err := row.Scan(
		&i.ID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getLayoutComponentsByLayoutID = `-- name: GetLayoutComponentsByLayoutID :many
SELECT id, design_id, layout_id, width, height, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, created_at, updated_at, deleted_at FROM layout_components 
WHERE layout_id = $1
ORDER BY created_at desc
`

func (q *Queries) GetLayoutComponentsByLayoutID(ctx context.Context, layoutID int32) ([]LayoutComponent, error) {
	rows, err := q.db.Query(ctx, getLayoutComponentsByLayoutID, layoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LayoutComponent
	for rows.Next() {
		var i LayoutComponent
		if err := rows.Scan(
			&i.ID,
			&i.DesignID,
			&i.LayoutID,
			&i.Width,
			&i.Height,
			&i.Color,
			&i.Type,
			&i.Xi,
			&i.Xii,
			&i.Yi,
			&i.Yii,
			&i.BboxXi,
			&i.BboxXii,
			&i.BboxYi,
			&i.BboxYii,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLayoutRegionByLayoutID = `-- name: GetLayoutRegionByLayoutID :many
SELECT id, layout_id, xi, xii, yi, yii, created_at, updated_at, deleted_at FROM layout_region
WHERE layout_id = $1
ORDER BY created_at desc
`

func (q *Queries) GetLayoutRegionByLayoutID(ctx context.Context, layoutID int32) ([]LayoutRegion, error) {
	rows, err := q.db.Query(ctx, getLayoutRegionByLayoutID, layoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LayoutRegion
	for rows.Next() {
		var i LayoutRegion
		if err := rows.Scan(
			&i.ID,
			&i.LayoutID,
			&i.Xi,
			&i.Xii,
			&i.Yi,
			&i.Yii,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLayoutTemplateByLayoutID = `-- name: GetLayoutTemplateByLayoutID :many
SELECT id, layout_id, type, width, height, slots_x, slots_y, created_at, updated_at, deleted_at FROM layout_template 
WHERE layout_id = $1
ORDER BY created_at desc
`

func (q *Queries) GetLayoutTemplateByLayoutID(ctx context.Context, layoutID int32) ([]LayoutTemplate, error) {
	rows, err := q.db.Query(ctx, getLayoutTemplateByLayoutID, layoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LayoutTemplate
	for rows.Next() {
		var i LayoutTemplate
		if err := rows.Scan(
			&i.ID,
			&i.LayoutID,
			&i.Type,
			&i.Width,
			&i.Height,
			&i.SlotsX,
			&i.SlotsY,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLayouts = `-- name: ListLayouts :many
SELECT id, design_id, width, height, created_at, updated_at, deleted_at FROM layout 
ORDER BY created_at desc
LIMIT $1 OFFSET $2
`

type ListLayoutsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLayouts(ctx context.Context, arg ListLayoutsParams) ([]Layout, error) {
	rows, err := q.db.Query(ctx, listLayouts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Layout
	for rows.Next() {
		var i Layout
		if err := rows.Scan(
			&i.ID,
			&i.DesignID,
			&i.Width,
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
