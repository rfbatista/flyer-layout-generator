// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ComponentType string

const (
	ComponentTypeBackground      ComponentType = "background"
	ComponentTypeLogotipoMarca   ComponentType = "logotipo_marca"
	ComponentTypeLogotipoProduto ComponentType = "logotipo_produto"
	ComponentTypeTextoCta        ComponentType = "texto_cta"
)

func (e *ComponentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ComponentType(s)
	case string:
		*e = ComponentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ComponentType: %T", src)
	}
	return nil
}

type NullComponentType struct {
	ComponentType ComponentType `json:"component_type"`
	Valid         bool          `json:"valid"` // Valid is true if ComponentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullComponentType) Scan(value interface{}) error {
	if value == nil {
		ns.ComponentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ComponentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullComponentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ComponentType), nil
}

type TemplateType string

const (
	TemplateTypeSlots      TemplateType = "slots"
	TemplateTypeDistortion TemplateType = "distortion"
)

func (e *TemplateType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TemplateType(s)
	case string:
		*e = TemplateType(s)
	default:
		return fmt.Errorf("unsupported scan type for TemplateType: %T", src)
	}
	return nil
}

type NullTemplateType struct {
	TemplateType TemplateType `json:"template_type"`
	Valid        bool         `json:"valid"` // Valid is true if TemplateType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTemplateType) Scan(value interface{}) error {
	if value == nil {
		ns.TemplateType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TemplateType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTemplateType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TemplateType), nil
}

type Design struct {
	ID             int32            `json:"id"`
	Name           string           `json:"name"`
	RequestID      pgtype.Int4      `json:"request_id"`
	ImageUrl       pgtype.Text      `json:"image_url"`
	ImageExtension pgtype.Text      `json:"image_extension"`
	FileUrl        pgtype.Text      `json:"file_url"`
	FileExtension  pgtype.Text      `json:"file_extension"`
	Width          pgtype.Int4      `json:"width"`
	Height         pgtype.Int4      `json:"height"`
	IsProccessed   pgtype.Bool      `json:"is_proccessed"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

type DesignComponent struct {
	ID        int32             `json:"id"`
	DesignID  int32             `json:"design_id"`
	Width     pgtype.Int4       `json:"width"`
	Height    pgtype.Int4       `json:"height"`
	Color     pgtype.Text       `json:"color"`
	Type      NullComponentType `json:"type"`
	Xi        pgtype.Int4       `json:"xi"`
	Xii       pgtype.Int4       `json:"xii"`
	Yi        pgtype.Int4       `json:"yi"`
	Yii       pgtype.Int4       `json:"yii"`
	CreatedAt pgtype.Timestamp  `json:"created_at"`
}

type DesignElement struct {
	ID             int32            `json:"id"`
	DesignID       int32            `json:"design_id"`
	Name           pgtype.Text      `json:"name"`
	LayerID        pgtype.Text      `json:"layer_id"`
	Text           pgtype.Text      `json:"text"`
	Xi             pgtype.Int4      `json:"xi"`
	Xii            pgtype.Int4      `json:"xii"`
	Yi             pgtype.Int4      `json:"yi"`
	Yii            pgtype.Int4      `json:"yii"`
	Width          pgtype.Int4      `json:"width"`
	Height         pgtype.Int4      `json:"height"`
	IsGroup        pgtype.Bool      `json:"is_group"`
	GroupID        pgtype.Int4      `json:"group_id"`
	Level          pgtype.Int4      `json:"level"`
	Kind           pgtype.Text      `json:"kind"`
	ComponentID    pgtype.Int4      `json:"component_id"`
	ImageUrl       pgtype.Text      `json:"image_url"`
	ImageExtension pgtype.Text      `json:"image_extension"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

type Image struct {
	ID          int64            `json:"id"`
	Url         string           `json:"url"`
	PhotoshopID pgtype.Int4      `json:"photoshop_id"`
	TemplateID  pgtype.Int4      `json:"template_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type Request struct {
	ID         int32            `json:"id"`
	Name       string           `json:"name"`
	StartedAt  pgtype.Timestamp `json:"started_at"`
	FinishedAt pgtype.Timestamp `json:"finished_at"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
	DeletedAt  pgtype.Timestamp `json:"deleted_at"`
}

type RequestStep struct {
	ID         int32            `json:"id"`
	Name       string           `json:"name"`
	RequestID  int32            `json:"request_id"`
	StartedAt  pgtype.Timestamp `json:"started_at"`
	FinishedAt pgtype.Timestamp `json:"finished_at"`
	ErrorAt    pgtype.Timestamp `json:"error_at"`
	Log        pgtype.Text      `json:"log"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Template struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Type      NullTemplateType `json:"type"`
	Width     pgtype.Int4      `json:"width"`
	Height    pgtype.Int4      `json:"height"`
	SlotsX    pgtype.Int4      `json:"slots_x"`
	SlotsY    pgtype.Int4      `json:"slots_y"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
}

type TemplatesDistortion struct {
	ID         int32            `json:"id"`
	X          pgtype.Int4      `json:"x"`
	Y          pgtype.Int4      `json:"y"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
	DeletedAt  pgtype.Timestamp `json:"deleted_at"`
	TemplateID int32            `json:"template_id"`
}

type TemplatesSlot struct {
	ID         int32            `json:"id"`
	Xi         pgtype.Int4      `json:"xi"`
	Yi         pgtype.Int4      `json:"yi"`
	Width      pgtype.Int4      `json:"width"`
	Height     pgtype.Int4      `json:"height"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
	DeletedAt  pgtype.Timestamp `json:"deleted_at"`
	TemplateID int32            `json:"template_id"`
}
