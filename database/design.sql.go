// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: design.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createdesign = `-- name: Createdesign :one
INSERT INTO design (
  name,
  file_url,
  project_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

type CreatedesignParams struct {
	Name      string      `json:"name"`
	FileUrl   pgtype.Text `json:"file_url"`
	ProjectID pgtype.Int4 `json:"project_id"`
}

func (q *Queries) Createdesign(ctx context.Context, arg CreatedesignParams) (Design, error) {
	row := q.db.QueryRow(ctx, createdesign, arg.Name, arg.FileUrl, arg.ProjectID)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.LayoutID,
		&i.ProjectID,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getdesign = `-- name: Getdesign :one
SELECT id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at FROM design
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getdesign(ctx context.Context, id int32) (Design, error) {
	row := q.db.QueryRow(ctx, getdesign, id)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.LayoutID,
		&i.ProjectID,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getdesignBackgroundComponent = `-- name: GetdesignBackgroundComponent :one
SELECT id, layout_id, design_id, width, height, is_original, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, priority, inner_xi, inner_xii, inner_yi, inner_yii, created_at FROM layout_components
WHERE design_id = $1 AND type = 'background' LIMIT 1
`

func (q *Queries) GetdesignBackgroundComponent(ctx context.Context, designID int32) (LayoutComponent, error) {
	row := q.db.QueryRow(ctx, getdesignBackgroundComponent, designID)
	var i LayoutComponent
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.IsOriginal,
		&i.Color,
		&i.Type,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.BboxXi,
		&i.BboxXii,
		&i.BboxYi,
		&i.BboxYii,
		&i.Priority,
		&i.InnerXi,
		&i.InnerXii,
		&i.InnerYi,
		&i.InnerYii,
		&i.CreatedAt,
	)
	return i, err
}

const getdesignComponentByID = `-- name: GetdesignComponentByID :one
SELECT id, layout_id, design_id, width, height, is_original, color, type, xi, xii, yi, yii, bbox_xi, bbox_xii, bbox_yi, bbox_yii, priority, inner_xi, inner_xii, inner_yi, inner_yii, created_at FROM layout_components
WHERE design_id = $1 LIMIT 1
`

func (q *Queries) GetdesignComponentByID(ctx context.Context, designID int32) (LayoutComponent, error) {
	row := q.db.QueryRow(ctx, getdesignComponentByID, designID)
	var i LayoutComponent
	err := row.Scan(
		&i.ID,
		&i.LayoutID,
		&i.DesignID,
		&i.Width,
		&i.Height,
		&i.IsOriginal,
		&i.Color,
		&i.Type,
		&i.Xi,
		&i.Xii,
		&i.Yi,
		&i.Yii,
		&i.BboxXi,
		&i.BboxXii,
		&i.BboxYi,
		&i.BboxYii,
		&i.Priority,
		&i.InnerXi,
		&i.InnerXii,
		&i.InnerYi,
		&i.InnerYii,
		&i.CreatedAt,
	)
	return i, err
}

const listDesignsByProjectID = `-- name: ListDesignsByProjectID :many
SELECT id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at FROM design
WHERE project_id = $1
`

func (q *Queries) ListDesignsByProjectID(ctx context.Context, projectID pgtype.Int4) ([]Design, error) {
	rows, err := q.db.Query(ctx, listDesignsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Design
	for rows.Next() {
		var i Design
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.LayoutID,
			&i.ProjectID,
			&i.ImageExtension,
			&i.FileUrl,
			&i.FileExtension,
			&i.Width,
			&i.Height,
			&i.IsProccessed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listdesign = `-- name: Listdesign :many
SELECT id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at FROM design
OFFSET $1 LIMIT $2
`

type ListdesignParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) Listdesign(ctx context.Context, arg ListdesignParams) ([]Design, error) {
	rows, err := q.db.Query(ctx, listdesign, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Design
	for rows.Next() {
		var i Design
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.LayoutID,
			&i.ProjectID,
			&i.ImageExtension,
			&i.FileUrl,
			&i.FileExtension,
			&i.Width,
			&i.Height,
			&i.IsProccessed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listdesignElements = `-- name: ListdesignElements :many
SELECT id, design_id, layout_id, component_id, asset_id, name, layer_id, text, xi, xii, yi, yii, inner_xi, inner_xii, inner_yi, inner_yii, width, height, is_group, group_id, level, kind, image_url, image_extension, created_at, updated_at FROM layout_elements 
WHERE design_id = $1
LIMIT $2 OFFSET $3
`

type ListdesignElementsParams struct {
	DesignID int32 `json:"design_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListdesignElements(ctx context.Context, arg ListdesignElementsParams) ([]LayoutElement, error) {
	rows, err := q.db.Query(ctx, listdesignElements, arg.DesignID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LayoutElement
	for rows.Next() {
		var i LayoutElement
		if err := rows.Scan(
			&i.ID,
			&i.DesignID,
			&i.LayoutID,
			&i.ComponentID,
			&i.AssetID,
			&i.Name,
			&i.LayerID,
			&i.Text,
			&i.Xi,
			&i.Xii,
			&i.Yi,
			&i.Yii,
			&i.InnerXi,
			&i.InnerXii,
			&i.InnerYi,
			&i.InnerYii,
			&i.Width,
			&i.Height,
			&i.IsGroup,
			&i.GroupID,
			&i.Level,
			&i.Kind,
			&i.ImageUrl,
			&i.ImageExtension,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDesignAsProccessed = `-- name: SetDesignAsProccessed :one
UPDATE design
SET
    is_proccessed = true
WHERE
    id = $1
RETURNING id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

func (q *Queries) SetDesignAsProccessed(ctx context.Context, designID int32) (Design, error) {
	row := q.db.QueryRow(ctx, setDesignAsProccessed, designID)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.LayoutID,
		&i.ProjectID,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDesignByID = `-- name: UpdateDesignByID :one
UPDATE design
SET
    name = CASE WHEN $1::boolean
        THEN $2 ELSE name END,

    image_url = CASE WHEN $3::boolean
        THEN $4 ELSE image_url END,

    width = CASE WHEN $5::boolean
        THEN $6 ELSE width END,

    height = CASE WHEN $7::boolean
        THEN $8 ELSE height END,

    layout_id = CASE WHEN $9::boolean
        THEN $10 ELSE layout_id END

WHERE
    id = $11
RETURNING id, name, image_url, layout_id, project_id, image_extension, file_url, file_extension, width, height, is_proccessed, created_at, updated_at
`

type UpdateDesignByIDParams struct {
	NameDoUpdate     bool        `json:"name_do_update"`
	Name             pgtype.Text `json:"name"`
	ImageUrlDoUpdate bool        `json:"image_url_do_update"`
	ImageUrl         pgtype.Text `json:"image_url"`
	WidthDoUpdate    bool        `json:"width_do_update"`
	Width            pgtype.Int4 `json:"width"`
	HeightDoUpdate   bool        `json:"height_do_update"`
	Height           pgtype.Int4 `json:"height"`
	LayoutDoUpdate   bool        `json:"layout_do_update"`
	LayoutID         pgtype.Int4 `json:"layout_id"`
	DesignID         int32       `json:"design_id"`
}

// You can use sqlc.arg() and @ to identify named parameters
func (q *Queries) UpdateDesignByID(ctx context.Context, arg UpdateDesignByIDParams) (Design, error) {
	row := q.db.QueryRow(ctx, updateDesignByID,
		arg.NameDoUpdate,
		arg.Name,
		arg.ImageUrlDoUpdate,
		arg.ImageUrl,
		arg.WidthDoUpdate,
		arg.Width,
		arg.HeightDoUpdate,
		arg.Height,
		arg.LayoutDoUpdate,
		arg.LayoutID,
		arg.DesignID,
	)
	var i Design
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.LayoutID,
		&i.ProjectID,
		&i.ImageExtension,
		&i.FileUrl,
		&i.FileExtension,
		&i.Width,
		&i.Height,
		&i.IsProccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
