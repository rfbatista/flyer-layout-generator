@import "./components.css";

:root {
  font-family:
    "Inter",
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Helvetica,
    Arial,
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol";
  --sl-font-sans: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol";
  --font-size-base: 1rem;
  --font-size-biggish: 1.75rem;
  --font-size-big: 2.25rem;

  --ratio: 1.5;

  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  /* Colors */
  --top-bar-bg-color: #121212;
  --side-bar-bg-color: #201f2a;
  --editor-bg-color: #3f3f3f;
}

/* utilities */
.font-size\:base {
  font-size: var(--font-size-base) !important;
}

.font-size\:biggish {
  font-size: var(--font-size-biggish) !important;
}

.font-size\:big {
  font-size: var(--font-size-big) !important;
}

.hide {
  display: none;
}

.img {
  max-width: 100%;
  max-height: 100%;
}

* {
  box-sizing: border-box;
}

body {
  /* font-family: Helvetica, Arial, sans-serif; */
  --border: 4px solid black;
  --padding: calc(1rem * 1.4);
  --border-thick: 1px;
  /* padding: 2rem; */
  margin: 0;
}

img {
  max-width: 100%;
}

.container {
  max-width: 900px;
  margin: 0 auto;
}

.wrapper {
  border-width: var(--border-thick);
  border: var(--border-thick) solid;
  padding: var(--padding);
}

/*-----------------------------------------------------------------------*/
/* The Sidebar
/*-----------------------------------------------------------------------*/
.with-sidebar {
  overflow: hidden;
  --space: 1em;
  --side-width: 350px;
  --content-min: 50%;
}

.with-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc((var(--space) / 2) * -1);
}

.with-sidebar > * > * {
  flex-basis: var(--side-width);
  flex-grow: 1;
  /* ↓ applies to both elements */
  margin: calc((var(--space) / 2));
}

/* ↓ if is a right sidebar (side: right) -> :first-child */
.with-sidebar > * > :nth-of-type(2) {
  /* ↓ grow from nothing */
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(var(--content-min) - var(--space));
}


.right-sidebar {
  overflow: hidden;
  --space: 1em;
  --side-width: 350px;
  --content-min: 50%;
}

.right-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc((var(--space) / 2) * -1);
}

.right-sidebar > * > * {
  flex-basis: var(--side-width);
  flex-grow: 1;
  /* ↓ applies to both elements */
  margin: calc((var(--space) / 2));
}

/* ↓ if is a right sidebar (side: right) -> :first-child */
.right-sidebar > * > :first-child {
  /* ↓ grow from nothing */
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(var(--content-min) - var(--space));
}

/*-----------------------------------------------------------------------*/
/* Box
/*-----------------------------------------------------------------------*/
.box {
  display: block;
  padding: var(--s-1);
  /* border-width: var(--border-thick); */
  /* border: var(--border-thick) solid; */
  /* ↓ For high contrast mode */
  outline: var(--border-thick) solid transparent;
  outline-offset: calc(var(--border-thick) * -1);
}

/*-----------------------------------------------------------------------*/
/* The Stack
/*-----------------------------------------------------------------------*/
.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  --space: var(--s-1);
}

.stack > * + * {
  margin-top: var(--space);
}

/*-----------------------------------------------------------------------*/
/* The Center
/*-----------------------------------------------------------------------*/
.center {
  box-sizing: content-box;
  display: block;
  margin-left: auto;
  margin-right: auto;
  max-width: 60ch;
  /* ↓ Intrinsic Centering: That is, centering elements based on their natural, content-based widths. */
  /* display: flex;
  flex-direction: column;
  align-items: center; */

  /* ↓ Gutters (i.e. 1em) */
  /* padding-left: 1em;
  padding-right: 1em; */
}

/*-----------------------------------------------------------------------*/
/* The Cluster
/*-----------------------------------------------------------------------*/
.cluster {
  --space: 1rem;
  overflow: hidden;
}

.cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--space) / 2 * -1);
}

.cluster > * > * {
  margin: calc(var(--space) / 2);
}

/*-----------------------------------------------------------------------*/
/* The Switcher
/*-----------------------------------------------------------------------*/
.switcher {
  --threshold: 30rem;
  --space: 1rem;
  --large: calc(1 + 7 / 10);
}

.switcher > * {
  display: flex;
  flex-wrap: wrap;
  /* ↓ Multiply by -1 to make negative */
  margin: calc(var(--space) / 2 * -1);
}

.switcher > * > * {
  flex-grow: 1;
  flex-basis: calc((var(--threshold) - (100% - var(--space))) * 999);
  /* ↓ Half the value to each element, combining to make the whole */
  margin: calc(var(--space) / 2);
}

/* .switcher > * > :nth-child(1) {
  flex-grow: var(--large);
} */

/* se for necessário aplicar stack apartir de uma quantidade de items
/* .switcher > * > :nth-last-child(n + 4), */
/* .switcher > * > :nth-last-child(n + 4) ~ * { */
/*   flex-basis: 100%; */
/* } */

/*-----------------------------------------------------------------------*/
/* The Cover
/*-----------------------------------------------------------------------*/
.cover {
  --padding: 1rem;
  --min-height: 50vh;
  --space: 1rem;
  display: flex;
  flex-direction: column;
  min-height: var(--min-height);
  /* ↓ noPad padding: 0; */
  padding: var(--padding);
}

.cover > * {
  margin-top: var(--space);
  margin-bottom: var(--space);
}

/* ↓ h2 is the centered selector but can be any selector */
.cover > :first-child:not(h2) {
  margin-top: 0;
}

.cover > :last-child:not(h2) {
  margin-bottom: 0;
}

/* ↓ h2 is the centered selector but can be any selector */
.cover > h2 {
  margin-top: auto;
  margin-bottom: auto;
}

/*-----------------------------------------------------------------------*/
/* The Grid
/*-----------------------------------------------------------------------*/
.grid {
  --min: 15rem;
  --space: 1rem;
  align-content: start;
  display: grid;
  gap: var(--space);
  grid-template-columns: 100%;
}

/* needs javascript for when the container size is wider than the grid width */
.grid.aboveMin {
  grid-template-columns: repeat(auto-fit, minmax(var(--min), 1fr));
}

/*-----------------------------------------------------------------------*/
/* The Frame
/*-----------------------------------------------------------------------*/
.frame {
  padding-bottom: calc(var(--n) / var(--d) * 100%);
  position: relative;
}

.frame916 {
  --n: 9;
  --d: 16;
}

.frame43 {
  --n: 3;
  --d: 4;
}

.frame-square {
  --n: 1;
  --d: 1;
}

.frame > * {
  overflow: hidden;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame > img,
.frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/*-----------------------------------------------------------------------*/
/* The Reel
/*-----------------------------------------------------------------------*/

.reel {
  --space: 1rem;
  --itemWidth: auto;
  --height: auto;
  --trackColor: lightcoral;
  --thumbColor: #fff;
  display: flex;
  /* ↓ For images, which may be very large or use differing aspect ratios, we may want to set the Reel’s height. */
  height: var(--height);
  overflow-x: auto;
  overflow-y: hidden;
  scrollbar-color: var(--thumbColor) var(--trackColor);
}

.reel::-webkit-scrollbar {
  height: 1rem;
}

.reel::-webkit-scrollbar-track {
  background-color: var(--trackColor);
}

.reel::-webkit-scrollbar-thumb {
  background-color: var(--trackColor);
  background-image: linear-gradient(
    var(--trackColor) 0,
    var(--trackColor) 0.25rem,
    var(--thumbColor) 0.25rem,
    var(--thumbColor) 0.75rem,
    var(--trackColor) 0.75rem
  );
}

.reel > * {
  flex: 0 0 var(--itemWidth);
}

.reel > img {
  height: 100%;
  flex-basis: auto;
  width: auto;
}

.reel > * + * {
  margin-left: var(--space);
}

.reel.overflowing {
  padding-bottom: var(--space);
}

/*-----------------------------------------------------------------------*/
/* Icon
/*-----------------------------------------------------------------------*/

.html.sl-theme-dark.icon {
  background: blue;
}

.icon {
  height: 0.75em;
  /* ↓ Override the em value with `1cap`
where `cap` is supported */
  height: 1cap;
  width: 0.75em;
  width: 1cap;
}

.with-icon {
  /* ↓ Set the `inline-flex` context,
which eliminates the word space */
  display: inline-flex;
  align-items: baseline;
}

.with-icon .icon {
  /* ↓ Use the logical margin property
and a --space variable with a fallback */
  margin-inline-end: var(--space, 0.5em);
}

imposter-l {
  position: absolute;
  inset-block-start: 50%;
  inset-inline-start: 50%;
  transform: translate(-50%, -50%);
}
